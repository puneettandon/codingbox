Airbnb Booking.com Readme

Functional Requirements

    -> Hotel                      --> User                                         --> Analytics
          1. OnBoarding                 1. Search
             of hotels                     property in particular location
          2. Updates                    2. Book
             their properties
          3. Booking                    3. Check Bookings
              Check bookings
              and insight of revenues

Non-Functional Requirements

    Mostly from user point of view
    -> Low Latency
    -> High Availability
    -> High Consistency
    -> Scale
           500K Hotels
           10million rooms
           1000 Rooms/Hotel  (Max 7500)





 ------> Hotel UI for managers (web/mobile app)
            -- onboard to our platform
            -- modify the property/ add new room/ new service

 ------> Hotel Service
            -- Manages hotel part basically the on-boarding and the management
            -- If there is spike in traffic , so there could be multiple nodes of this hotel service (Horizontal Scaling of Hotel Service Component)
            -- Hotel Data is relational data (As there is not too much of Hotel) so can be handled by clustered mysql
                with one master and multiple slaves.
            -- If there is huge spike in Read traffic , we can add more slaves but this data resides in MySQL database
            -- Hotels can add images about the rooms and their property, all of those images would be stored into CDN.
               and the reference to the CDN which is  basically a URL of the image would be stored in the database
               and that url would be sent out to the customers and whenever they want to render an image that would be
               looked up directly from the cdn.
            -- What is CDN? CDN is geographically distributed data store which we will be using for sending out images
                throughout the whole world.
            -- Each time  modification is happening to the hotel / or let's say a new hotel comes in we want to bubble up
               this hotel to the users who are going to search for this. There are multiple ways we can send out this
               information to the search piece. We will be using kafka here.
            -- Each time modification happens withing hotel service will flow through a kafka cluster.
            -- There will be multiple consumers sitting on the top of this kafka cluster which will populate their
                data store for serving the search traffic and other traffic as well.
            -- Whenever there is modification, search consumer pulls up the payload from kafka and it stores in to
                its own database and this data base would be used to power the search on the website.
                As here we are using ES for search as a database. Solr can also be a option.
            -- Elastic Search for fuzzy search it's good.So will be able to handle all typos and spelling mistakes
            -- Elastic Search will sit on top of search Service.
            -- If there is spike in the traffic, can increase the number of nodes in kafka cluster,can increase number
               of search consumers and can increase the number of nodes in elastic search cluster.
            -- Search Service powers the search on the website/UI/mobile app
            -- User talks to load balancer and to the search service whenever they want to search for particular hotel
               Can give date range , location , or price range as search criteria and some tags eg. 5star or beach facing.


            ------------------------------------------------------------------------------------------------------------

            Booking Flow:
            -- Call from Book UI (in same app as search UI)
            -- Booking Service sits on top of MySQL database.
            -- There are two different MySQL clusters.(different for hotel service different for booking service)
            -- Keep different clusters so we can take care of scaling separately of each other.
            -- Booking Request will come, it stores something , it will send the request for payment,
               once there is success, it will mark the booking confirm.
            -- Whenever booking is happening ,data is flowing into the same kafka. Why?
               Suppose there is just one room available in a hotel and that room is now booked. Now I want to make sure
               that this hotel is not available for search now in that same date range because it's not available.
            -- So all of those information is again sent to the same kafka.which is read by Search Consumer
               and then takes care of even removing the hotels which are now completely booked.


            Archival Service
            -- We are storing the live data into MySQL for booking.By live data, I mean the bookings that are done but
               have not completed thereby making sure that this is having a scale which is low enough that MySQL
               can easily handle and once the booking moves to a terminal state so let's say booking is cancelled
               or completed, it will move through archival service to a cassandra cluster.
            -- Reason for using cassandra, Cassandra is very good database which can handle a huge amount of reads
                and writes.It has a constraint that it needs a partition key on which all the queries should happen.
            -- So let's say if I want to search by booking_id, my partition key has to be booking_id.
               I cannot do any kinds of queries on a cassandra therefore I didn't use Cassandra as source of truth database.
            -- Once Booking service is archived, we need to do GET on those.
            -- Once the booking is done, we need to notify the people.Then Comes Notification Service.
                Any changes in booking , Notification service will consume events from Kafka and notifies the people,
                So for example on each booking notify the hotel,  booking is cancelled by hotel need to notify consumer,
                or on each booking need to notify consumer with an invoice.


            -----------------------------------------------------------------------------------------------------------------

            UI For Hotels/Users - Booking View
            -- Each time a booking is done or even without that a user might want to see their old bookings
               or a hotel might want to see all the bookings that they have.(Read only View for them)
            -- That will be powered by booking management service which talks to two data sources.
                 1. MySQL cluster for all the active bookings which are to happen sometime in future.
                 2. Cassandra Cluster for the bookings that have already happened.
                 Adding Redis on top of MySQL to reduce load on this MySQL which will acts as my cache.
            -- Whenever I have a query - get bookings of a user - cache result into this redis.Write through cache.
               Whenever booking is coming in Redis will be updated.


            -------------------------------------------------------------------------------------------------------------------
            Analytics
            -- For Analytics we have used a Hadoop Cluster on which we will be pushing in all the events that are going into my kafka
                which is basically information about all my hotels, bookings, transactions in the system.
            -- So there will be spark streaming consumer that reads from kafka and puts all the data into a Hadoop cluster
               which can do all Hive queries or any kind of queries and build up a lot of reporting.


 -----------------------------------------------------------------------------------------------------------------------------------------------------------

    API Required for Airbnb-Booking App

        APIs

            Post   /hotels
            Get    /hotels/{id}
            Put    /hotels/{id}
            Put    /hotels/{hotel_id}/rooms/{room_id}  - update or create new room information


        Hotel DB

            hotel [ID,name,LOCALITY_ID,description,original_images,display_images,is_active]
                  - original_images - actual images uploaded by people
                  - display_images - original images that we have uploaded on the CDN
                  - is_active - soft delete flag

            hotel_facilities[ID,HOTEL_ID,FACILITY_ID,is_active]
                -

            rooms[ID,HOTEL_ID,display_name,is_active,quantity,price_min,price_max]
                - display_name - identifier to tell the customer on what kind of room it is
                - price_min and price_max - ranges where hotel provides - depends on the hadoop cluster and ML model
                  range wherein the price could be fluctuated by the system.
                  Starting could be avg of both prices.

            rooms_facilities[ID,ROOM_ID,FACILITY_ID,is_active]

            facilities[ID,display_name]
                - list of all the facilities a hotel and a room can possibly have

            locality[ID,CITY_ID,STATE_ID,COUNTRY_ID,zipcode,is_active]


             hotel_facilities and room_facilities are basically mapping tables which is a many-to-many
             relationship between a hotel_id and facility_id.

             Other Informations that can be added -
                Auditing Information
                BookKeeping Information

        Q-  There is no redis cache for this MySQL Database.Why?
            We could have kept the Cache on top of this and all these GET APIs could have been bit more faster.
            But this is not coming in the critical path of any high throughput business interaction.
            So adding a redis cluster is a cost.


 ------------------------------------------------------------------------------------------------------------------------

 Internal Functioning of Booking Service

        Booking DB

            available_rooms - ROOM_ID,date,initial_quantity,available_quantity > 0 (constraint cannot go negative)
            booking - BOOKING_ID,ROOM_ID,USER_ID,start_date,end_date,no_of_rooms,STATUS,invoice_id
            status - [Reserved,Booked,Cancelled,Completed]

            One booking cannot contain different room types
            you can have multiple rooms of the same room type
            but you cannot have like one deluxe room and one regular room in one booking.
            If you want that there will be a small change required
            Cancelled and Completed are terminal statuses


        APIs Required For Booking

            POST /book - { user_id,room_id,quantity,start_date,end_date}

            1. Check in available rooms tables.
            2. Insert in booking and reduce in available rooms
            3. Put in redis with TTL
            4. Put in kafka
            5. Redirect to payment

            When it gets a request to do a booking, it first of queries available rooms table
            and check whether or not I have that many number of rooms remaining or not.
            So If no rooms left for that particular room_id for that particular date,
            there is no point of proceeding so we can error out from there.
            In case of Success,we have rooms , we will block the room (temporarily)
            and if payment is success , actually block the room.
            Cannot Reserve room for infinite amount of time , if payment is success in next five minutes then not good,
            If not , assume payment will not go through and will unblock the room.So other can book the room.
            Utilize TTL(Time to  Live) of Redis for this use case.
            We will put the key in redis saying booking_id expires at some timestamp.At timestamp could be configurable number.
            If you get success,Success Notification  Reserved -> Booked and get invoice_id from payment
            If Failure, Booking Cancelled Notification

            1.  Payment -> Success
            2.  Payment -> Failed
            3.  Key Expired
            4.  3 and then 1
                    Payment success first then key expired then Success
                    Key Expired first then payment success then Cancelled
                        a. Revert the payment
                        b. Payment already done, check if rooms available then book.


            Caveats Here -:
                With TTL Approach of Redis
            Better Solution
                Implement a queue within Redis and have a poller that kind of queries redis, the topmost node of queue
                everyone second and whichever one it finds has expired then you could kind of delete that.
                   -> Additional effort in building polling mechanism
                      So possibly have to add more nodes into the Redis cluster and also on the side where cron is being developed.



            Couple of Optimizations:
                -> If payment success , evict the key don't need to keep.
                    Even in case of failure.


            Important Features of MYSQL -
                Transaction
                Constraint
                   to make sure things are more consistent



            Spike in Traffic:
               ->  All the components are horizontally scalable.

----------------------------------------------------------------------------------------------------------------------------------------------------------

            Alternates Of Above Design Choice -
                MySQL - Postgres, SQL Server which provides ACID guarantees
                Redis - Memcache/ any other cache
                Cassandra - Best - Hbase can be option - Sharded across partition key . Each query on partition key
                            1) Get booking by hotel
                            2) Gt booking by user
                            Two kinds of data distributed by two different partition keys
                Kafka - Active MQ or Rabbit MQ or any other queuing mechanism or amazon SQS. Kafka scales better.

                CPU and Disk Usage monitoring  - can be done on Grafana
                Alert and Achieve the NFR Goal   of latency and high availability


-------------------------------------------------------------------------------------------------------------------------------------------------------------
                Geography Spread
                    If Earthquake at one location - everything goes down

                    Data Center 1      Data Center 2
                    Data Center 3      Data Center 4

                    Can have multiple Data centers at different geographical locations

                    DC1 Primary other secondary

                    All data center at different region - people closer their data center will connect to those data centers.
                    Data in hotel management system is fairly specific to a geography.













