Notification Service Readme

Design a Notification Service that is scalable enough.
This is never a stand alone system but this is always embedded in some other system design.

------------------------------------Functional Requirements-----------------------------------------
- Send Notifications

- Pluggable - means - So let's say we want to support SMS and email as one form of notification.
If I want to support In-App notifications as well.So it should be easy enough to add that.It can be further extended to a lot of kinds of notifications.
for example - whatsapp notification or anything of that sort.So, extendability should be taken care of.

- SaaS Product - why? - Because the main idea is you should know who is sending what number of notifications.And it should be possible for you to rate limit.
There are two uses cases where you will need that. So rate limiting as a offering you will need, if you are giving out to other companies as a product to use.
But even internally, you would need to do some kind of rate limiting.Let's just its being used by a company like Amazon.
Now there are multiple business verticals.If all of them send you notifications, then you will end up getting hundreds of notifications in a day.So that's
a very bad user experience.So notification system should be able to overall put a rate limit across all the users across all the platforms saying a
particular user should not get more than five notifications in a day.There could be certain amount of classifications done.So there are two kinds of
notifications - one is a transactional notification saying you have made an order, this much amount of money has been deducted from your account, something
of that sort.(So these are ok to get).But promotional notification should always have a rate limit.So If you are building for within your company,
then you will build a user level rate limiting.But If you are giving it out externally to other companies as a product, then you might want to put a rate limiting
saying how many requests can you make for this server or may be make billing tiers and price them accordingly.

- Prioritization - we will support multiple priorities of messages.Some messages are low priority and certain messages are of high priority.Let's say if you are
sending a one time password(OTP), then that's a very high priority message.why? Because if the user would not get that SMS or email or anything, then they
would not log into your platform and they will not do the transaction that they want to do.But if it's a promotional message , it is okay if it's low
priority and if it gets delayed, if it goes to the user let's say half an hour late also, it doesn't really matter. Process high priority then low priority.



--------------------------------------Non Functional Requirements-----------------------------------------------

- High Availability - why? - Because if you are planning to build it as a SaaS product which can be used by other companies, then down time would really cost
us a lot.
- Many Clients - Should be built in a way that it's easy enough to add more clients.and whenever we want, we should be able to attribute saying how many
clients have made us how many number of requests.

--------------------------------------------------------------------------------------------------------------------


                                    Architecture of Notification Service

If you are building it for a small enough use case like let's just say if you want to send out some email notifications to some customers, given
some criteria you can build all of this as one deployable service and put all the logic in one place.

But want to build it as SaaS product where enormous number of clients would be using it for a lot of notifications,  follow this architecture.

The starting point of the whole system is couple of clients i.e. Client1, Client2 could be  any number of clients, who want to send out a notification.

Now, there are 2-3 kinds of requests that they  can send you.But all of those requests would come into something called as Notification Service, which is an
interface for us to talk to the other teams in the company, other companies or anything that we want.
There are two kinds of requests mainly.
One is where they tell you that I want to send this particular content to this particular user, let's say a email id kind of thing , as an email.This is one of
the request.
Other request could be saying, I have this userId and send them this notification.And decide how do you want to send, whether as an email or sms or whatever.
Normally the first kind of a model would be used by the other companies where they want to decide that they need to send an SMS or email or whatever.
The second model would generally be used when you are building this to be consumed within your own company.But normally as a SaaS product,its good to have
both the interface.

The idea of notification service is, for most kind of requests,it will just take the request , put it into kafka and respond back to the client saying,I
have taken the request and I will send notification in a couple of seconds at max.
You could make this transaction as a synchronous flow but that will take a bit more time and that will keep the client blocked.So,it's probably best
to take the requests and dump into kafka and move on.But let's just say if for a very critical scenario, you need it to be synchronous flow.You can basically
make the whole process synchronous through API calls.
-----------------------------------------------------------------------------------------------------------------------
But assuming it's a kafka for now.
This notification service would just do a very basic set of validations saying that email id should not be null or user id should not be null,
content should not be null,something of that sort.

There might be a lot of other validations, given certain kinds of events that you want to do.All of those validations would happen in this component
which is called notification validator and prioritizer.It does a couple of things.Validations is one part of it.The main thing that it does, it decides
the priority for a message.So based on some attribute within the message, let's say ,we will keep a message type identifier kind of a thing in a request
and based on that, it will decide the priority of a message.
High Priority - Normally, OTP is something which will be high priority because if the user can't login into the system, they can't place an order and things like that.
Second Highest Priority - would be a transactional message saying your order has been placed, it will be delivered by ...so and so.
Least Priority - would a promotional message wherein you are sending out offers and coupons message.
So, it decides the priority and puts the event into kafka topic , specific for each priority.So there will be topic for high priority messages ,different topic for
medium priority messages and different topic for low priority messages.
And while consuming, the consumers will first consume the high priority messages and then medium and then low priority.
The idea is - we don't want any lag in the high priority messages, but we should be at time okay if there is spike on low priority message and if it takes time,
that's okay.
---------------------------------------------------------
Now comes something called as    Rate Limiter

These two components( Rate limiter and Notification Handler) can be interchanged.We are having it in starting because the next component is a
slightly heaver component.
Rate limiter does two kinds of rate limiting.
1) It checks that the client who is calling me is that client allowed to call me these many number of times.That is the first thing.
2) The user whom I am sending this notification, am I supposed to send this notification to this user these many number of times.
So there could be a subscription that we have with a certain client that they can call us may be 10 times in a seconds.All of those kind of rate limiting,
would be one kind of rate limiting.
The other thing is there could be a configuration saying I cannot send more than three promotional messages to a particular user in a day.That would be
another kind of rate limiting.Both these rate limiting would be implemented in a very similar way.
Saying there would be a key.It could be a client id, user id , anything, and whenever you get a request , you basically increment that key into this Redis
for a certain timestamp or may be the timestamp need not be a exact timestamp, it could be day , it could be second, it could be at minute level.
The moment you exceed that threshold is when you drop that request.
There is one more thing that it does,which is called request counting.Let's say with some of the clients you have a pay for use this kind of subscription model,
saying they can call you any number of times, there is no rate limiting as such but as the number of calls increases, the amount of money we charge them
also increases.So they pay at request basis.
For those kind of clients , we will implement it in a very similar way. Just that we will not restrict the request. We will keep incrementing the counter
and then there can be reporting built on top of it.
-------------------------------------------------------------------------------

Next Component - Notification Handler and User Preferences
First let's look at what are user preferences.
User might give us a preference saying don't send me SMS,send me email instead.Or a user could have said that I want to unsubscribe from all your promotional
messages.So all of those would be handled by this User Preference Service.It has two components it talks to - 1) Preference MySQL DB, which is a single
source of truth for all the user preferences that we have in our system.This would be mainly used when we are building it for our own use.
Let's say Amazon is building this notification system for their own use.This will normally not be used when you are integrating with third parties.
Third parties would handle this piece on their end.
The second thing it will talk to is a user service which is basically - let's say you got a request saying to this user id 123 , send this particular text.
what is that user 123?It's something that you can search from user service to get the email id or phone number or anything  of that sort , given a user id.
This basically could handle one more kind of rate limiting. A user might say that don't send me more than 3 promotional messages in a week or one promotional
message in a week.So,If that kind of a rate limiting also exists and want to support that ,then this whole rate limiting module would come after this
notification handler.But, this Rate is a very light thing and Notification is heavy as it calls DB, calls an external service.That's the reason I have
kept    it after the Rate Limiter.




