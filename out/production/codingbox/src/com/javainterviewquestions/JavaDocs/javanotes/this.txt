			this

In Java, this is a reference variable that refers to the current object.


this ---->  object

	Usage of java this keyword
1) this can be used to refer current class instance variable.
2) this can be used to invoke current class method (implicitly)
3) this() can be used to invoke current class constructor
4) this can be passed as an argument in the method call
5) this can be passed as argument in constructor call 
6) this can be used to return the current class instance from the method.

1) this: to refer current class instance varible
class Student{  
int rollno;  String name;  float fee;  
Student(int rollno,String name,float fee){  
rollno=rollno;  name=name;  fee=fee;  }  
void display(){System.out.println(rollno+" "+name+" "+fee);}  
}  
class TestThis1{  
public static void main(String args[]){  
Student s1=new Student(111,"ankit",5000f);  
Student s2=new Student(112,"sumit",6000f);  
s1.display();  s2.display();  
}}  

output:
0 null 0.0
0 null 0.0

In the above example, parameters (formal arguments) and instance variables are same. So, we are using this keyword to distinguish local variable and instance variable.

solution: using this keyword:

class Student{  
int rollno;  String name;  float fee; 
Student(int rollno,String name,float fee){  
this.rollno=rollno;  this.name=name;  this.fee=fee;  }  
void display(){System.out.println(rollno+" "+name+" "+fee);}  
}  
  
class TestThis2{  
public static void main(String args[]){  
Student s1=new Student(111,"ankit",5000f);  
Student s2=new Student(112,"sumit",6000f);  
s1.display();  s2.display();  
}}  

output:
111 ankit 5000
112 sumit 6000


next →← prev
this keyword in java
There can be a lot of usage of java this keyword. In java, this is a reference variable that refers to the current object.

java this keyword
Usage of java this keyword
Here is given the 6 usage of java this keyword.

this can be used to refer current class instance variable.
this can be used to invoke current class method (implicitly)
this() can be used to invoke current class constructor.
this can be passed as an argument in the method call.
this can be passed as argument in the constructor call.
this can be used to return the current class instance from the method.
Suggestion: If you are beginner to java, lookup only three usage of this keyword.


Usage of Java this keyword

 
1) this: to refer current class instance variable
The this keyword can be used to refer current class instance variable. If there is ambiguity between the instance variables and parameters, this keyword resolves the problem of ambiguity.

Understanding the problem without this keyword
Let's understand the problem if we don't use this keyword by the example given below:
class Student{  
int rollno;  
String name;  
float fee;  
Student(int rollno,String name,float fee){  
rollno=rollno;  
name=name;  
fee=fee;  
}  
void display(){System.out.println(rollno+" "+name+" "+fee);}  
}  
class TestThis1{  
public static void main(String args[]){  
Student s1=new Student(111,"ankit",5000f);  
Student s2=new Student(112,"sumit",6000f);  
s1.display();  
s2.display();  
}}  
Test it Now
Output:

0 null 0.0
0 null 0.0
In the above example, parameters (formal arguments) and instance variables are same. So, we are using this keyword to distinguish local variable and instance variable.

Solution of the above problem by this keyword
class Student{  
int rollno;  
String name;  
float fee;  
Student(int rollno,String name,float fee){  
this.rollno=rollno;  
this.name=name;  
this.fee=fee;  
}  
void display(){System.out.println(rollno+" "+name+" "+fee);}  
}  
  
class TestThis2{  
public static void main(String args[]){  
Student s1=new Student(111,"ankit",5000f);  
Student s2=new Student(112,"sumit",6000f);  
s1.display();  
s2.display();  
}}  
Test it Now
Output:

111 ankit 5000
112 sumit 6000

If local variables(formal arguments) and instance variables are different, there is no need to use this keyword
----------------------------------------------------------------

2) this : to invoke current class method

class A{
void m(){}
void n(){    m();   }
psvm(){

new A().n();
}}

     -----> compiler

class A{
void m(){}
void n(){
    this.m();
}
psvm(){
new A().n();
}}

m(); is same as this.m();

--------------------------------------------------------------

3) this(): to invoke current class constructor
this() constructor call can be used to invoke the current class constructor. It is used to reuse the constructor. In other words ,used for constructor chaining.

class A{
A(){ SOP("Hello A");
A(int x) {  this(); SOP(x);}
psvm()
{ A a= new A(10); }}
output: Hello A 
	10


Rule: call to this() must be the first statement in constructor.

---------------------------------

4) this: to pass as an argument in the method
The this keyword can also be passed as an argument in the method. It is mainly used in the event handling.

class S2{
void m(S2 obj)
{   SOP("Method is invoked"); }
void p()
{  m(this);   }
psvm(){
S2 s1 = new S2();
s1.p();
}}
output: 
Method is invoked

---------------------------------------------------------------
5) this: to pass as argument in the constructor call
class B{
A4 obj;
B(A4 obj)
{this.obj = obj;}
void display(){ 	SOP(obj.data);//using data member of A4 }
}
class A4{ 
int data = 10;
A4(){
 B b = new B(this);
 b.display();
}

psvm(){
A4 a = new A4();
}}
output:
10

------------------------------------------------------------

6) this keyword can be used to return current class instance 

class A{

A getA()
{
	return this;
}

void msg(){ 	SOP("Hello Java");	}
psvm()
{
new A().getA().msg();
}}


---------------------------------------------------------------
Proving this keyword

class A{
void m()
{ 	SOP(this); // prints same reference id	}

psvm(){	
A obj = new A();
SOP(obj);	//prints the reference if
obj.m();
}}
