Twitter System Design Readme

    Functional Requirements:

        1. Tweet - post content of 140 chars length,could have image,video contents,links to external websites
        2. Re-Tweet
        3. Follow
        4. Search - search content within tweets posted - useful in trend analysis and figure out what is happening

    Non Functional Requirement:

        1. Read Heavy - 100 times more read traffic than write traffic
        2. Fast Rendering  - Low Latency - Always Availability
        3. Fast Tweet
        4. Lag ok in some cases - (Suppose if someone posted something it's ok you are seeing in 20 seconds but when seeing it should be fast)
        5. Scale
             -> 150 Mil  DAU (Daily Active Users)
             -> 350 Mil  MAU (Monthly Active Users)
             -> 1.5 Bil  Accounts
             -> 500 Mil tweets/Day
             -> 5700 tweets/s
             -> 12000 @ peak


-----------------------------------------------------------------------------------------------------------------------------

Categorize users in different categories

    1. Famous - Have huge number of followers  - Actors,Politician,SportsPerson etc
    2. Active - People who are accessing twitter in last couple of days or hours(example last 3 days)
    3. Live - Subset of Active users - People who are actually accessing the platform now. - As goes offline move back to active status
    4. Passive - People who are not in above 3 categories - or haven't accessed twitter in last 3 days)
    5. Inactive - Deleted accounts (Soft Delete)


 --------------------------------------------------------------------------------------------------------------------------------


 Architecture of Twitter

 1. On-boarding process - where users come in and register themselves on platform.
    UserService - source of truth for all the user related information.
    And userService will power the login flow, registered flow, user profile screen and other things.
    userService will also power internal tools and APIs required for serving internal tools.
        for example if some other service wants to get information about a particular user, they might want to query UserService.
    APIs -
        Get - to get by particular userId,
              to get by emailId
        Post - to update details of particular user
        Bulk Get API - to fetch information of a lot of users
                for example - if there is a screen, on which you see the followers of a particular user,
                so there will be a lot of followers.So instead of calling this userService one by one for each user to
                display their name , their email id , their photo and all , we could very well make a call with
                probably 20-30-40 userIds request and information about all of them coming at once in the response to save the network bandwidth.

        User Information is a very much relational. From scale standpoint it has million of users , but they are still finite enough and it will
        not go unboundedly. (Relational model ). So MySQL.
        Optimizations on MySQL - User information don't change frequently - More of write heavy system but bit of reads,
        but reads are mostly powered by a Redis Cache.
        Redis Cache - image of user database which has a key of userId



 2. User Follow process - Any particular user can go to someone else's profile and follow them.
    They might want to get certain information about the following process like they want to know who I follow
    or how many users follow me.
    It is powered by GraphService
    Called GraphService because it creates a network of how everybody in the ecosystem is connected.
    GraphService APIs -
        - To add a new follow link
        - To get all the followers of a person
        - To get all the people who this person is following
        - Bulk Api - Get all the followers of a list of users
                   - or Get a list of list of users of a list of users who are being followed.
    Sits on Top of another MYSQL DB. 2 different clusters.
    Larger data ....requires sharding the data.
    userId,followerId,timestamp on which transactions happened.
    Data which doesn't get updated very frequently.
    Overall at a larger layer across all the 150 million active users per day, this would be updated but for one user
    it wouldn't get updated too frequently.
    Need to cache two types of information in redis,
        - first of all given a userId what are the list of users that this person follows(following)
        - Given userId, who are the list of users that follow this particular user, which is basically the  followers of the user.
    can use same or different redis.



3.  Analytic Process - whenever a user is interacting with twitter, they are sending certain signals even if they are not explicit.
    Lets say while browsing through a list of tweets that they go through, and if they spend much time on one of the tweets,
    kind of telling have interest in this tweet.Gather information based on the way people access the whole platform.
    So whenever we find the some event of importance happening on the UI(app/website). Track it and use it for analytics.

    AnalyticsService - events put on kafka.

    User Live WebSockets(Notification)
    User Group for different kind of users -
    Live Users - using twitter right now
    Suppose I am using twitter right now and one of the people who I follow posted something.
    It would make sense to just so that I don't have to open the app , refresh, or do something.
    or If somebody has tagged me in a tweet and If I get notified about that. will be nice user experience.
    We are capturing till how much time the user is actually live.and When this communication between the two parties
    stop, we do realize that person has gone away, close the app, the person is not live anymore.
    If person is not live we cannot send them this kind of notification.
    That information will be put in kafka saying the user is not live anymore, he was live at a particular timestamp.
    That information will go to userService , it will store it int  the cache redis saying the usertype has now moved from
    live user , to active user.

