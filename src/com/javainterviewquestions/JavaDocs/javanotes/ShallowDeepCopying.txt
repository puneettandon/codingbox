		Deep ,Shallow And Lazy Copy 


In object-oriented programming,object copying is 
creating a copy of an existing object,the resulting object is called an object copy or simply copy of an original object.

There are several ways to copy an object ,most commonly by copy constructor or cloning

 Shallow copying - by default implementation of clone method provides shallow copying. It means it creates new instance and copies all the field of object to that new instance and returns it as object type, we need to explicitly cast it back to our original object. This is shallow copy of the object.

clone() method of the object class support shallow copy of the object. 

If the object contains primitive as well as nonprimitive or reference type variable in shallow copy, the cloned object also refers to the same object to which the original object refers as only the object references gets copied and not the referred objects themselves.

That’s why the name shallow copy or shallow cloning in Java. If only primitive type fields or Immutable objects are there then there is no difference between shallow and deep copy in Java


public class Ex { 
  
    private int[] data; 
  
    // makes a shallow copy of values 
    public Ex(int[] values) { 
        data = values; 
    } 
  
    public void showData() { 
        System.out.println( Arrays.toString(data) ); 
    } 
} 
The above code shows shallow copying. data simply refers to the same array as vals.
	      0     1    2
values -----> 3     7    9

values------>  3    7    9

This can lead to unpleasant side effects if the elements of values are changed via some other reference.

public class UsesEx{ 
  
    public static void main(String[] args) { 
        int[] vals = {3, 7, 9}; 
        Ex e = new Ex(vals); 
        e.showData(); // prints out [3, 7, 9] 
        vals[0] = 13; 
        e.showData(); // prints out [13, 7, 9] 
  
        // Very confusing, because we didn't 
        // intentionally change anything about  
        // the object e refers to. 
    } 
} 

Output 1 : [3, 7, 9]
Output 2 : [13, 7, 9]

------------------------------------------------------------------------------

		Deep Copy

Whenever we need own copy not to use default implementation we call it as deep copy, whenever we need deep copy of the object we need to implement according to our need.
So for deep copy we need to ensure all the member class also implement the Cloneable interface and override the clone() method of the object class.


A deep copy means actually creating a new array and copying over the values.

public class Ex { 
      
    private int[] data; 
  
    // altered to make a deep copy of values 
    public Ex(int[] values) { 
        data = new int[values.length]; 
        for (int i = 0; i < data.length; i++) { 
            data[i] = values[i]; 
        } 
    } 
  
    public void showData() { 
        System.out.println(Arrays.toString(data)); 
    } 
} 
                 0       1        2
values ------>   3       7        9


values ------->   3      7        9

data --------->   3       7        9


public class UsesEx{ 
  
    public static void main(String[] args) { 
        int[] vals = {3, 7, 9}; 
        Ex e = new Ex(vals); 
        e.showData(); // prints out [3, 7, 9] 
        vals[0] = 13; 
        e.showData(); // prints out [3, 7, 9] 
  
       // changes in array values will not be  
       // shown in data values.  
    } 
} 

Output 1 : [3, 7, 9]
Output 2 : [3, 7, 9]



	Deep Copying code in java


class Department implements Cloneable{
    String empId;
 
    String grade;
 
    String designation;
 
    public Department(String empId, String grade, String designation) {
        this.empId = empId;
 
        this.grade = grade;
 
        this.designation = designation;
    }
    //Default version of clone() method.
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
 
class Employee implements Cloneable {
    int id;
 
    String name;
 
    Department dept;
 
    public Employee(int id, String name, Department dept) {
        this.id = id;
 
        this.name = name;
 
        this.dept = dept;
    }
 
    // Overriding clone() method to create a deep copy of an object.
 
    protected Object clone() throws CloneNotSupportedException {
        Employee emp = (Employee) super.clone();
 
        emp.dept = (Department) dept.clone();
 
        return emp;
    }
}
 
public class DeepCopyInJava {
    public static void main(String[] args) {
        Department dept1 = new Department("1", "A", "AVP");
 
        Employee emp1 = new Employee(111, "John", dept1);
 
        Employee emp2 = null;
 
        try {
            // Creating a clone of emp1 and assigning it to emp2
 
            emp2 = (Employee) emp1.clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
 
        // Printing the designation of 'emp1'
 
        System.out.println(emp1.dept.designation); // Output : AVP
 
        // Changing the designation of 'emp2'
 
        emp2.dept.designation = "Director";
 
        // This change will be reflected in original Employee 'emp1'
 
        System.out.println(emp1.dept.designation); // Output : AVP
    }
}





		Code for Shallow Copy in java

class Department {
    String empId;
 
    String grade;
 
    String designation;
 
    public Department(String empId, String grade, String designation) {
        this.empId = empId;
 
        this.grade = grade;
 
        this.designation = designation;
    }
}
 
class Employee implements Cloneable {
    int id;
 
    String name;
 
    Department dept;
 
    public Employee(int id, String name, Department dept) {
        this.id = id;
 
        this.name = name;
 
        this.dept = dept;
    }
 
    // Default version of clone() method. It creates shallow copy of an object.
 
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
 
public class ShallowCopyInJava {
 
    public static void main(String[] args) {
 
        Department dept1 = new Department ("1", "A", "AVP");
 
        Employee emp1 = new Employee (111, "John", dept1);
 
        Employee emp2 = null;
 
        try {
            // Creating a clone of emp1 and assigning it to emp2
 
            emp2 = (Employee) emp1.clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
 
        // Printing the designation of 'emp1'
 
        System.out.println(emp1.dept.designation); // Output : AVP
 
        // Changing the designation of 'emp2'
 
        emp2.dept.designation = "Director";
 
        // This change will be reflected in original Employee 'emp1'
 
        System.out.println(emp1.dept.designation); // Output : Director
    }
}